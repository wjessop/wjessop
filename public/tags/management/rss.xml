<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Management on Will Jessop&#39;s Writings</title>
    <link>http://localhost:1313/tags/management/</link>
    <description>Recent content in Management on Will Jessop&#39;s Writings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>will@willj.net (Will Jessop)</managingEditor>
    <webMaster>will@willj.net (Will Jessop)</webMaster>
    <copyright>&amp;#169; Will Jessop. All rights reserved.</copyright>
    <lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/management/" rel="self" type="application/rss+xml" />
    <item>
      <title>Always document your magic values</title>
      <link>http://localhost:1313/posts/always-document-your-magic-values/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      <author>will@willj.net (Will Jessop)</author>
      <guid>http://localhost:1313/posts/always-document-your-magic-values/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Having to write down documentation for the value makes you think about the value more, forces you to justify it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chestertons fence
Many programmers know this instinctively&lt;/p&gt;
&lt;p&gt;Marina story, also instinctive?&lt;/p&gt;
&lt;p&gt;Sometimes using the defaults can be documentable too, why did you choose the default? I prefer explicitly stating the value and why it was chosen.&lt;/p&gt;
&lt;p&gt;Documenting no decision taken might be possible. No decision made on retry, will leave it to sidekiq etc. Better than no docs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/G._K._Chesterton#Chesterton&#39;s_fence&#34;&gt;https://en.wikipedia.org/wiki/G._K._Chesterton#Chesterton&#39;s_fence&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Designing your application for scale</title>
      <link>http://localhost:1313/posts/designing-your-application-for-scale/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      <author>will@willj.net (Will Jessop)</author>
      <guid>http://localhost:1313/posts/designing-your-application-for-scale/</guid>
      <description>&lt;h2 id=&#34;the-trap&#34;&gt;The Trap&lt;/h2&gt;
&lt;p&gt;Picture a startup, recently launched, a sales tracking application called WidgetSalesTrackr. There are 10s of customers signed up, a similar number of users, and customers are using the application to track sales that they are making on their e-commerce platforms. Data is coming in from an API endpoint but it&amp;rsquo;s happening at the rate of 100s of sales per day and the data is still pretty small. They&amp;rsquo;ve been going 3 months so far and have in the region of 10,000 sales in the sales table.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s looking promising but it&amp;rsquo;s still small, the founders haven&amp;rsquo;t quit their main jobs yet but they have high hopes that things are going to take off because feedback is really positive.&lt;/p&gt;
&lt;p&gt;Early on someone added pagination to the pages where sales are listed, but only after someone pointed out that having a few thousand sales on one page was a bit cumbersome. Whoops. Still, it was easy to add, and is fairly simple to use and understand:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/simple-pagination.png&#34; alt=&#34;Some basic pagination used on a website&#34;&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a button to skip to the first couple of pages, buttons to skip to the last couple of pages, and buttons to skip to the next and previous pages. Standard stuff.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/5-years-later-cropped.jpeg#full&#34; alt=&#34;Spongebob timecard, 5 years later&#34;&gt;&lt;/p&gt;
&lt;p&gt;Some years have passed and things have taken off. WidgetSalesTrackr has a team of 10 engineers plus the usual design, product, sales and marketing departments you&amp;rsquo;d expect.&lt;/p&gt;
&lt;p&gt;The original 100s of sales per day ingested by the API has grown massively and now peaks at closer to 100 per second. Month on month they&amp;rsquo;re adding 50 million records to the sales table, and the records are getting updated now too as order statuses change. The database is starting to creak a little and it&amp;rsquo;s the sales table, the biggest table with the highest insert and update rate, that is the cause of most of the problems.&lt;/p&gt;
&lt;p&gt;So what&amp;rsquo;s the problem here?&lt;/p&gt;
&lt;p&gt;There is talk of moving sales data to another store, like DynamoDB or similar, but it&amp;rsquo;s a huge task.&lt;/p&gt;
&lt;p&gt;Scaling problems are good though right! Yes, but that doesn&amp;rsquo;t mean you have to walk deliberately and directly into a pit trap full of them.
distracting&lt;/p&gt;
&lt;p&gt;there is no time to be dealing with this. There are more important projects to complete&lt;/p&gt;
&lt;p&gt;Listen to customers:
&amp;ldquo;I go back through the list of sales and calculate the average order total for all sales in the previous year&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Control access to the data&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;notes&#34;&gt;Notes&lt;/h1&gt;
&lt;p&gt;Hyrum&amp;rsquo;s Law&lt;/p&gt;
&lt;p&gt;With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen this problem many times now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BOUND IT!&lt;/li&gt;
&lt;li&gt;Total Number of sales &lt;add today&gt;&lt;/li&gt;
&lt;li&gt;archived data, can be available more offline?&lt;/li&gt;
&lt;li&gt;Go through the regular motions. Add indexes, cacheing, faster hardware, database partitions etc.&lt;/li&gt;
&lt;li&gt;Postgres partitioning mention in talk, moving partitions out of the way&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    </channel>
</rss>
